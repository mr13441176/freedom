diff --git a/src/main/scala/shell/xilinx/VC707NewShell.scala b/src/main/scala/shell/xilinx/VC707NewShell.scala
index f02e4d1..f44e117 100644
--- a/src/main/scala/shell/xilinx/VC707NewShell.scala
+++ b/src/main/scala/shell/xilinx/VC707NewShell.scala
@@ -199,7 +199,7 @@ class PCIeVC707Overlay(val shell: VC707Shell, val name: String, params: PCIeOver
   shell.sdc.addGroup(clocks = Seq("txoutclk", "userclk1"))
 }
 
-class VC707Shell()(implicit p: Parameters) extends Series7Shell
+abstract class VC707Shell()(implicit p: Parameters) extends Series7Shell
 {
   // PLL reset causes
   val pllReset = InModuleBody { Wire(Bool()) }
@@ -210,10 +210,37 @@ class VC707Shell()(implicit p: Parameters) extends Series7Shell
   val switch    = Overlay(SwitchOverlayKey)    (new SwitchVC707Overlay  (_, _, _))
   val chiplink  = Overlay(ChipLinkOverlayKey)  (new ChipLinkVC707Overlay(_, _, _))
   val ddr       = Overlay(DDROverlayKey)       (new DDRVC707Overlay     (_, _, _))
-  val pcie      = Overlay(PCIeOverlayKey)      (new PCIeVC707Overlay    (_, _, _))
   val uart      = Overlay(UARTOverlayKey)      (new UARTVC707Overlay    (_, _, _))
   val sdio      = Overlay(SDIOOverlayKey)      (new SDIOVC707Overlay    (_, _, _))
   val jtag      = Overlay(JTAGDebugOverlayKey)      (new JTAGDebugVC707Overlay    (_, _, _))
+}
+
+class VC707BaseShell()(implicit p: Parameters) extends VC707Shell
+{
+  val topDesign = LazyModule(p(DesignKey)(designParameters))
+
+  // Place the sys_clock at the Shell if the user didn't ask for it
+  p(ClockInputOverlayKey).foreach(_(ClockInputOverlayParams()))
+
+  override lazy val module = new LazyRawModuleImp(this) {
+    val reset = IO(Input(Bool()))
+    xdc.addBoardPin(reset, "reset")
+
+    val reset_ibuf = Module(new IBUF)
+    reset_ibuf.io.I := reset
+
+    val powerOnReset = PowerOnResetFPGAOnly(sys_clock.get.clock)
+    sdc.addAsyncPath(Seq(powerOnReset))
+
+    pllReset :=
+      reset_ibuf.io.O || powerOnReset ||
+      chiplink.map(!_.ereset_n).getOrElse(false.B)
+  }
+}
+
+class VC707PCIeShell()(implicit p: Parameters) extends VC707Shell
+{
+  val pcie      = Overlay(PCIeOverlayKey)      (new PCIeVC707Overlay    (_, _, _))
 
   val topDesign = LazyModule(p(DesignKey)(designParameters))
 
