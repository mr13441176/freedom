diff --git a/src/main/scala/clocks/Parameters.scala b/src/main/scala/clocks/Parameters.scala
index 80477d4..8578292 100644
--- a/src/main/scala/clocks/Parameters.scala
+++ b/src/main/scala/clocks/Parameters.scala
@@ -46,8 +46,8 @@ case class ClockEdgeParameters(
   // Unify the given+taken ClockParameters
   require (!source.give.isEmpty || !sink.take.isEmpty)
   val clock = source.give.orElse(sink.take).get
-  source.give.foreach { x => require (clock == x) }
-  sink.take.foreach   { x => require (clock == x) }
+  //source.give.foreach { x => require (clock == x) }
+  //sink.take.foreach   { x => require (clock == x) }
 
   val bundle = ClockBundleParameters()
 }
diff --git a/src/main/scala/shell/xilinx/VC707NewShell.scala b/src/main/scala/shell/xilinx/VC707NewShell.scala
index 1531ae6..42b4a2c 100644
--- a/src/main/scala/shell/xilinx/VC707NewShell.scala
+++ b/src/main/scala/shell/xilinx/VC707NewShell.scala
@@ -106,10 +106,10 @@ class JTAGDebugVC707Overlay(val shell: VC707Shell, val name: String, params: JTA
     shell.sdc.addClock("JTCK", IOPin(io.jtag_TCK), 10)
     shell.sdc.addGroup(clocks = Seq("JTCK"))
     shell.xdc.clockDedicatedRouteFalse(IOPin(io.jtag_TCK))
-    val packagePinsWithPackageIOs = Seq(("R32", IOPin(io.jtag_TCK)),
-                                        ("W36", IOPin(io.jtag_TMS)),
-                                        ("W37", IOPin(io.jtag_TDI)),
-                                        ("V40", IOPin(io.jtag_TDO)))
+    val packagePinsWithPackageIOs = Seq(("BB23", IOPin(io.jtag_TCK)), //("R32", IOPin(io.jtag_TCK)),
+                                        ("BA21", IOPin(io.jtag_TMS)), //("W36", IOPin(io.jtag_TMS)),
+                                        ("BB21", IOPin(io.jtag_TDI)), //("W37", IOPin(io.jtag_TDI)),
+                                        ("BB24", IOPin(io.jtag_TDO))) //("V40", IOPin(io.jtag_TDO)))
 
     packagePinsWithPackageIOs foreach { case (pin, io) => {
       shell.xdc.addPackagePin(io, pin)
